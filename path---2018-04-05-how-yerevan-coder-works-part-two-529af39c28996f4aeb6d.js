webpackJsonp([99846881475548],{635:function(n,s){n.exports={data:{site:{siteMetadata:{title:"yerevancoder",author:"Coders of Armenia"}},markdownRemark:{id:"/Users/holykill/Documents/iterate/yerevancoder.github.io/src/pages/2018-04-05-how-yerevan-coder-works-part-two/index.md absPath of file >>> MarkdownRemark",html:'<p><strong>This is part two of a two part series, see <a href="../2018-03-13-how-yerevan-coder-works">part one</a> for\nthe beginning of the post, this post assumes familiarity with React and the React ecosystem.</strong></p>\n<p>Continuing from last time, <code class="language-text">yc</code> is a serverless site as it is hosted on github pages, but we still\nhave features like user authentication and a database for keeping our\n<a href="../available-for-work">freelancers</a> and for our <a href="../hiring-board">job-postings</a>. We are able to do\nthis with firebase, an object storage database.</p>\n<h1>Getting a copy</h1>\n<p>First let’s get a copy of the source code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/yerevancoder/yerevancoder.github.io.git yerevan-coder\n$ <span class="token function">cd</span> yerevan-coder\n</code></pre>\n      </div>\n<p>Now we have a copy and we can play with the source code.</p>\n<h1>Code organization</h1>\n<p><code class="language-text">gatsby</code> forces a structure on us via the directories under <code class="language-text">src</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">pwd</span>\n/Users/Edgar/Repos/yerevan-coder\n$  <span class="token function">ls</span> -halt src\ntotal 0\ndrwxr-xr-x  35 Edgar  staff   1.1K Apr  5 11:14 pages\ndrwxr-xr-x  20 Edgar  staff   640B Apr  5 11:13 <span class="token punctuation">..</span>\ndrwxr-xr-x   6 Edgar  staff   192B Apr  5 11:13 utils\ndrwxr-xr-x   7 Edgar  staff   224B Apr  5 11:13 <span class="token keyword">.</span>\ndrwxr-xr-x   3 Edgar  staff    96B Apr  5 11:13 templates\ndrwxr-xr-x   3 Edgar  staff    96B Apr  5 11:13 layouts\ndrwxr-xr-x  15 Edgar  staff   480B Apr  5 11:13 components\n</code></pre>\n      </div>\n<p>So we see that we have <code class="language-text">pages</code>, <code class="language-text">utils</code>, <code class="language-text">templates</code>, <code class="language-text">layouts</code> and <code class="language-text">components</code>. All the items\nunder <code class="language-text">pages</code> will be server side rendered by <code class="language-text">gatsby</code> and will result in a dedicated and individual\n<code class="language-text">HTML</code> page, hence why <code class="language-text">gatsby</code> is great for simple sites that just have static content. Files in\n<code class="language-text">pages</code>, <code class="language-text">layout</code> and <code class="language-text">components</code> expect a <code class="language-text">default export</code> of a React Component, either class\nbased component or functional component, also <code class="language-text">index.js</code> is a special file name for <code class="language-text">gatsby</code> so the\ncomponent exported by an <code class="language-text">index.js</code> is the one that represents that route under directories and\nsubdirectories of <code class="language-text">pages</code>. The <code class="language-text">index.js</code> under <code class="language-text">layouts</code> is special because it is like the rootmost\ncomponent of our application, it is a wrapper component for all the pages created by <code class="language-text">gatsby</code>.</p>\n<p>Hence all Components under pages get statically rendered based on data available at build-time,\nhowever some components need data from databases, so for those we push their data fetching logic\naway from build time and to runtime.</p>\n<h1>Rootmost component</h1>\n<p>Let’s start examining the rootmost component</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">pwd</span>\n/Users/Edgar/Repos/yerevan-coder/src/layouts\n$ <span class="token function">ls</span>\nindex.js\n</code></pre>\n      </div>\n<p>…and that <code class="language-text">index.js</code> does a <code class="language-text">default export</code> of a component. Here is the <code class="language-text">render</code> method of this\ncomponent, it is the most important <code class="language-text">render</code> method in the codebase since it determines how any of\nour UI looks like.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token number">1</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token number">2</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n<span class="token number">3</span>    <span class="token keyword">const</span> site_title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>site<span class="token punctuation">.</span>siteMetadata<span class="token punctuation">.</span>title<span class="token punctuation">;</span>\n<span class="token number">4</span>    <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>allMarkdownRemark<span class="token punctuation">.</span>edges<span class="token punctuation">;</span>\n<span class="token number">5</span>    <span class="token keyword">const</span> all_authors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> node <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> node<span class="token punctuation">.</span>timeToRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token number">6</span>    <span class="token keyword">const</span> authors_count <span class="token operator">=</span> all_authors<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n<span class="token number">7</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n<span class="token number">8</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'ApplicationContainer__Container\'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token number">9</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Helmet</span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>site_title<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token number">10</span>          <span class="token punctuation">{</span>global_styles<span class="token punctuation">}</span>\n<span class="token number">11</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'stylesheet\'</span><span class="token punctuation">}</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'/yc-styles.css\'</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token number">12</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n<span class="token attr-name">13</span>            <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://fonts.googleapis.com/css?family=Montserrat|Titillium+Web\'</span><span class="token punctuation">}</span></span>\n<span class="token attr-name">14</span>            <span class="token attr-name">rel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'stylesheet\'</span><span class="token punctuation">}</span></span>\n<span class="token attr-name">15</span>          <span class="token punctuation">/></span></span>\n<span class="token number">16</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n<span class="token attr-name">17</span>            <span class="token attr-name">rel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'stylesheet\'</span><span class="token punctuation">}</span></span>\n<span class="token attr-name">18</span>            <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://cdnjs.cloudflare.com/ajax/libs/balloon-css/0.5.0/balloon.min.css\'</span><span class="token punctuation">}</span></span>\n<span class="token attr-name">19</span>          <span class="token punctuation">/></span></span>\n<span class="token number">20</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Helmet</span><span class="token punctuation">></span></span>\n<span class="token number">21</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FixedSidebar</span> <span class="token attr-name">authors_count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>authors_count<span class="token punctuation">}</span></span> <span class="token attr-name">header_content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>yc<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token number">22</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'ApplicationContainer__MainContent\'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token number">23</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Headroom</span> <span class="token attr-name">pinStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span></span> <span class="token attr-name">onPin</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onPin<span class="token punctuation">}</span></span> <span class="token attr-name">onUnpin</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onUnpin<span class="token punctuation">}</span></span> <span class="token attr-name">onUnfix</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onUnfix<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token number">24</span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>pin_bar_content<span class="token punctuation">}</span>\n<span class="token number">25</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Headroom</span><span class="token punctuation">></span></span>\n<span class="token number">26</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'ApplicationContainer__BusinessContent\'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token number">27</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token number">28</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token number">29</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token number">30</span>  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Let’s break it down line by line. Starting with line <code class="language-text">2</code>, we use object destructing to pull out\n<code class="language-text">children</code>. This is a prop that React passes to our Component, it is whatever our rootmost component\nis wrapping around. From it’s usage on line <code class="language-text">26</code>, we can see that in this case, <code class="language-text">children</code> is a\nfunction but it does not always have to be.</p>\n<p>On line <code class="language-text">3</code> we pull out the <code class="language-text">site_title</code> from a deeply nested property chain lookup. But how do we know\nthat this lookup will succeed and where does this data even come from? For that answer, we look\nfurther down in <code class="language-text">layouts/index.js</code> and find this code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> pageQuery <span class="token operator">=</span> graphql<span class="token template-string"><span class="token string">`\n  query IndexQuery_ {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          timeToRead\n        }\n      }\n    }\n  }\n`</span></span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This is a <a href="https://graphql.org">graphql</a> query and notice that it is named <code class="language-text">pageQuery</code>, this is\nintentional as <code class="language-text">gatsby</code> will inject our <code class="language-text">default export</code>ed component and inject it with the data\nresult of this <code class="language-text">graphql</code> query, it will put it under the <code class="language-text">data</code> prop, hence <code class="language-text">this.props.data</code>.</p>\n<p>Moving onto line <code class="language-text">8</code>, we make a container div and begin with a <code class="language-text">Helmet</code> component. <code class="language-text">Helmet</code> is used\nto put whatever it’s children are into the <code class="language-text">&lt;head/&gt;</code> HTML element. We use it to load our <code class="language-text">CSS</code>\nwhich provides our popup tooltips on some buttons, fonts and website layout/style; handwritten CSS on YC is\nabout 900 lines with a few thousand more that is generated by function calls for the input field\neffects on new job post and modal signin forms.</p>\n<p>On line <code class="language-text">21</code> we see the <code class="language-text">FixedSidebar</code> which is sticky as it is because of the CSS it has:</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token selector">.InformationBar</span> <span class="token punctuation">{</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>\n  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>\n  <span class="token property">z-index</span><span class="token punctuation">:</span> 99<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 20px<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--sidebar-fixed-width<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This CSS keeps it from moving and we only do it under a media query, aka when the screen size is\nappropriate. So the full usage of our fixed sidebar is:</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 650px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector">.InformationBar</span> <span class="token punctuation">{</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>\n    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>\n    <span class="token property">z-index</span><span class="token punctuation">:</span> 99<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 20px<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--sidebar-fixed-width<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>aka, this <code class="language-text">CSS</code> will only work when the screen has a min-width of at least 650 pixels. You’ll notice\nthe usage of <code class="language-text">var(--sidebar-fixed-width)</code>, what is that? That is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables">CSS\nvariables</a>, a new feature of\nCSS where we can finally define variables in CSS. We do that with a pseudoelement called <code class="language-text">:root</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>\n  <span class="token property">--business-content-padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>\n  <span class="token property">--business-content-padding-half</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>\n  <span class="token property">--mobile-banner-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>\n  <span class="token property">--fade-white-button</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0, 0%, 90%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--fade-white-form</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0, 0%, 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--error-light-red</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0, 100%, 62.5%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--sidebar-fixed-width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>\n  <span class="token property">--text-shadow-color</span><span class="token punctuation">:</span> #f6dbb8<span class="token punctuation">;</span>\n  <span class="token property">--material-blue</span><span class="token punctuation">:</span> #37425d<span class="token punctuation">;</span>\n  <span class="token property">--material-beige</span><span class="token punctuation">:</span> #faf5f1<span class="token punctuation">;</span>\n  <span class="token property">--material-grey</span><span class="token punctuation">:</span> #c5c9cf<span class="token punctuation">;</span>\n  <span class="token property">--material-blue-heavy-fade</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>222.62, 25.7%, 29%, 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--material-blue-light-fade</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>222.6, 25.7%, 29%, 0.65<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--material-grey-heavy-fade</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>216, 9.4%, 79.2%, 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">--material-grey-light-fade</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>216, 9.4%, 79.2%, 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This lets us use these variables anywhere in our CSS with a <code class="language-text">var</code> invocation, yes it must be named <code class="language-text">:root</code>.</p>\n<h2>Back to React</h2>\n<p>…then we see the <code class="language-text">Headroom</code> Component used on line <code class="language-text">23</code>, this provides us with the nav bar that comes\ndown when you down up on mobile, you can see usage of <code class="language-text">this.state.pin_bar_content</code> on line <code class="language-text">24</code>,\nwhich should imply that we are keeping a React element (remember that a element is an instance of a\nReact Component) in state.</p>\n<p>Finally coming to line <code class="language-text">26</code>, we see <code class="language-text">children()</code> aka a function call, this is a pattern used in React\nwhen we don’t know what the contents of our component will be, we make it so that children is a\nfunction; this is a powerful pattern. Hence any UI we see on <code class="language-text">yc</code> is whatever is the result of the\n<code class="language-text">children()</code> function call in the <code class="language-text">render</code> method of the <code class="language-text">default export</code>ed React Component of\n<code class="language-text">layouts/index.js</code>.</p>\n<h1>Application Wide Data &#x26; Behavior</h1>\n<p>Working in the React paradigm, we pass data down the tree with props. Just like <code class="language-text">gatsby</code> passed us\nthe data from the result of the <code class="language-text">graphql</code> queries as <code class="language-text">this.props.data</code>, then so can we pass data\ndown as props as well. However, this can be tedious when the level of nesting is deep, that is, we\nhave to pass data from one component as prop to another, and then pass again and again, sometimes\neven five levels. React seems to limit the kinds of “global” operations we can do.</p>\n<h2>Context API</h2>\n<p>Of course React does have a solution, and its an important one that is undergoing changes at the\nmoment. As of commit <code class="language-text">0bf892baef941ea7a4117d4494b07fd1f7de13fc</code>, <code class="language-text">yc</code> is built with React version\n<code class="language-text">16.1.0</code>. That means that we are using the original context API, but note that React released a new\na much better context API in <code class="language-text">16.3.0</code> read this\n<a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html">post</a> for more critical details on the new\nAPI. The new context API is so nice that you can avoid using redux and mobx.</p>\n<p>The point of the context API is to inject values into the children (subtree) of any React element\nwithout having to go through many layers of nested data lookups.</p>\n<h3>Our usage</h3>\n<p>The older context API that we use forces us declare what values we want available to any element in\nthe subtree of the component that implements <code class="language-text">getChildContext</code>s.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> db<span class="token punctuation">,</span> firebase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../utils/db\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> INIT_STATE <span class="token operator">=</span> <span class="token punctuation">{</span>\n  authenticated_user<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  remember_me_checked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  pin_bar_content<span class="token punctuation">:</span> EMPTY_DIV<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationRoot</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>INIT_STATE <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> childContextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    authenticated_user<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    sign_user_in<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    sign_user_up<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    sign_user_out<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    submit_new_freelancer_post<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    submit_new_hiring_post<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">getChildContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      authenticated_user<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>authenticated_user<span class="token punctuation">,</span>\n      sign_user_up<span class="token punctuation">:</span> <span class="token punctuation">(</span>\n        given_username<span class="token punctuation">,</span>\n        given_email<span class="token punctuation">,</span>\n        given_password<span class="token punctuation">,</span>\n        user_receives_blog_newsletter<span class="token punctuation">,</span>\n        did_signup_and_update\n      <span class="token punctuation">)</span> <span class="token operator">=></span>\n        firebase\n          <span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">createUserAndRetrieveDataWithEmailAndPassword</span><span class="token punctuation">(</span>given_email<span class="token punctuation">,</span> given_password<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Could not sign you up because:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>reply <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> authenticated_user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pass_through</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> current_user <span class="token operator">=</span> firebase<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>currentUser<span class="token punctuation">;</span>\n            <span class="token keyword">return</span> db\n              <span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`signed-up-users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current_user<span class="token punctuation">.</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user_receives_blog_newsletter<span class="token punctuation">,</span> given_email<span class="token punctuation">,</span> given_username <span class="token punctuation">}</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> current_user<span class="token punctuation">.</span><span class="token function">updateProfile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> displayName<span class="token punctuation">:</span> given_username <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> authenticated_user <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> did_signup_and_update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// And other values not shown, see childContextTypes</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now any React Component will have access to the values described in <code class="language-text">childContextTypes</code> because we\nare implementing <code class="language-text">getChildContext</code> in the rootmost component of the whole React application. To get\naccess to those values, a child component describe what values it wants to have access to.</p>\n<p>Here is an example from <code class="language-text">src/components/page-control.js</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">PageControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> modal_show<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    authenticated_user<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    sign_user_out<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    sign_user_in<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    submit_new_freelancer_post<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n    submit_new_hiring_post<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>So this <code class="language-text">PageControl</code> Component has access to such values under <code class="language-text">this.context</code>, as in this\nmethod of the <code class="language-text">PageControl</code> Component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token function-variable function">signout_handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> sign_user_out <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> user_did_sign_out <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n  <span class="token function">sign_user_out</span><span class="token punctuation">(</span>user_did_sign_out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Hence the context API lets us centralize application wide data and behavior without forcing us to\nwrite a lot of props passing boilerplate.</p>\n<h1>firebase</h1>\n<p>The previous context API example showed a usage of firebase, specifically for creating a new\nuser. You’ll notice that the firebase API is modern, its Promise based so we can use plain Promise\nchaining with <code class="language-text">.then/.catch</code> or <code class="language-text">async/await</code>. We don’t use async/await in <code class="language-text">yc</code> because 1) it was\nbuild hassle to add polyfills and it made site’s JavaScript bundle bigger, 2) some people in country\nside of Armenia/Artsakh might have older browsers and async/await would break their experience.</p>\n<p>Coming back to firebase, it is a <code class="language-text">NoSQL</code> object store DB, which means that there is no formal\nschema, no tables, no primary keys/secondary keys. We just upload JavaScript values directly to a\npath, similar to buckets in AWS.</p>\n<p>Here is an example usage in <code class="language-text">src/utils/funcs.js</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">query_my_hiring_post_submissions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> current_user <span class="token operator">=</span> firebase<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>currentUser<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> db\n    <span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current_user<span class="token punctuation">.</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/my-hiring-board-submissions`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>snapshot <span class="token operator">=></span> snapshot<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>This function returns back all the JavaScript objects in the list at this ref path, where each\nJavaScript object becomes a value of a key which is the key that firebase autogenerated for the data\npoint. aka something like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n <span class="token string">\'-L12313435\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token string">\'-Lgefg9823\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token string">\'-L12f1234\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h1>Contributing</h1>\n<p>There are quite a few tasks that can be done in this project as a practical learning experience,\nnothing build real experience like a real world task. For example, the <code class="language-text">remember me</code> functionality\nin the sign modal does not actually work, neither does forget my password. Such tasks should come\nwith a Pull Request.</p>\n<h1>Closing</h1>\n<p>Be sure to write a comment below if there is something you don’t understand, or open a question on our\n<a href="https://forum.yerevancoder.com">forum</a>.</p>',
frontmatter:{title:"How yerevancoder.com works and how you can contribute (Part Two)",tags:"yerevancoder, tutorial, reactjs",author:"Edgar Aroutiounian",date:"April 05, 2018",discussionId:"2018-04-05-how-yerevancoder-works-part-two"}}},pathContext:{slug:"/2018-04-05-how-yerevan-coder-works-part-two/"}}}});
//# sourceMappingURL=path---2018-04-05-how-yerevan-coder-works-part-two-529af39c28996f4aeb6d.js.map