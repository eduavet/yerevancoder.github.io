{"version":3,"sources":["webpack:///path---2018-03-06-javascript-edge-cases-13aac46df18dc077dd0e.js","webpack:///./.cache/json/2018-03-06-javascript-edge-cases.json"],"names":["webpackJsonp","625","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","date","discussionId","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,sBAAqDC,gBAAmBC,GAAA,kJAAAC,KAAA;AAA+9vDC,aAAwbL,MAAA,yBAAAM,KAAA,0BAAAL,OAAA,mBAAAM,KAAA,iBAAAC,aAAA,sCAA0KC,aAAgBC,KAAA","file":"path---2018-03-06-javascript-edge-cases-13aac46df18dc077dd0e.js","sourcesContent":["webpackJsonp([122598896297167],{\n\n/***/ 625:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"yerevancoder\",\"author\":\"Coders of Armenia\"}},\"markdownRemark\":{\"id\":\"/Users/holykill/Documents/iterate/yerevancoder.github.io/src/pages/2018-03-06-javascript-edge-cases/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Edge cases in JavaScript</h1>\\n<p>Hi everyone, today we are going to talk about the edge cases in JS</p>\\n<h2>Small Decimal Values</h2>\\n<p>The most (in)famous side effect of using binary floating-point\\nnumbers (which, remember, is true of all languages that use IEEE\\n754 — not just JavaScript as many assume/pretend) is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">0.1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">0.2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Simply put, the representations for 0.1 and 0.2 in binary\\nfloating-point are not exact, so when they are added, the result\\nis not exactly 0.3. It’s really close: 0.30000000000000004, but if\\nyour comparison fails, “close” is irrelevant.</p>\\n<p>FYI, <code class=\\\"language-text\\\">0.1 + 0.5 === 0.6</code> works perfectly fine.</p>\\n<p>So you just have to be careful while working with floating numbers.</p>\\n<p>One way of handling this issue in JS is to use a tiny “rounding\\nerror”: <code class=\\\"language-text\\\">Number.EPSILON</code>. Here is its polyfill:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Number<span class=\\\"token punctuation\\\">.</span>EPSILON<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Number<span class=\\\"token punctuation\\\">.</span>EPSILON <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">52</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You simply have to create a function which does the “close to\\nequal” comparison with <code class=\\\"language-text\\\">Number.EPSILON</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span>n1<span class=\\\"token punctuation\\\">,</span> n2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abs</span><span class=\\\"token punctuation\\\">(</span>n1 <span class=\\\"token operator\\\">-</span> n2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> Number<span class=\\\"token punctuation\\\">.</span>EPSILON<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.0000001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.0000002</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<h2>NaN</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">NaN</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">NaN</code> is a very special value in that it’s never equal to another\\n<code class=\\\"language-text\\\">NaN</code> value (i.e., it’s never equal to itself). It’s the only\\nvalue, in fact, that is not reflexive (without the Identity\\ncharacteristic <code class=\\\"language-text\\\">x === x</code>). So, <code class=\\\"language-text\\\">NaN !== NaN</code>.</p>\\n<p>So how do we test for it, if we can’t compare to <code class=\\\"language-text\\\">NaN</code> (since that\\ncomparison would always fail)?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>Easy enough, right? We use the built-in global utility called\\n<code class=\\\"language-text\\\">isNaN(..)</code> and it tells us if the value is <code class=\\\"language-text\\\">NaN</code> or not. Problem solved!</p>\\n<p>Not so fast.</p>\\n<p>The isNaN(..) utility has a fatal flaw. It appears it tried to take the meaning of NaN (“Not a Number”) too literally — that its job is basically: “test if the thing passed in is either not a number or is a number.” But that’s not quite accurate.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// NaN</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"foo\\\"</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true -- ouch!</span>\\n</code></pre>\\n      </div>\\n<p>Clearly, “foo” is literally not a number, but it’s definitely not\\nthe NaN value either! This bug has been in JS since the very\\nbeginning (over 19 years of ouch).</p>\\n<p>As of ES6, finally a replacement utility has been provided:\\n<code class=\\\"language-text\\\">Number.isNaN(..)</code>. A simple polyfill for it so that you can\\nsafely check NaN values now even in pre-ES6 browsers is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Number<span class=\\\"token punctuation\\\">.</span>isNaN<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">isNaN</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nNumber<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nNumber<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false -- phew!</span>\\n</code></pre>\\n      </div>\\n<h1>Infinity</h1>\\n<p>Developers from traditional compiled languages like C are probably\\nused to seeing either a compiler error or runtime exception, like\\n“Divide by zero,” for an operation like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>However, in JS, this operation is well-defined and results in the\\nvalue Infinity (aka Number.POSITIVE_INFINITY). Unsurprisingly:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -Infinity</span>\\n</code></pre>\\n      </div>\\n<p>As you can see, -Infinity (aka Number.NEGATIVE_INFINITY) results\\nfrom a divide-by-zero where either (but not both!) of the divide\\noperands is negative.</p>\\n<p>JS uses finite numeric representations (IEEE 754 floating-point,\\nwhich we covered earlier), so contrary to pure mathematics, it\\nseems it is possible to overflow even with an operation like\\naddition or subtraction, in which case you’d get Infinity or\\n-Infinity.</p>\\n<p>For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_VALUE<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1.7976931348623157e+308</span>\\na <span class=\\\"token operator\\\">+</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\na <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">970</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\na <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">969</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1.7976931348623157e+308</span>\\n</code></pre>\\n      </div>\\n<p>According to the specification, if an operation like addition\\nresults in a value that’s too big to represent, the IEEE 754\\n“round-to-nearest” mode specifies what the result should be. So,\\nin a crude sense, <code class=\\\"language-text\\\">Number.MAX_VALUE + Math.pow( 2, 969 )</code> is\\ncloser to <code class=\\\"language-text\\\">Number.MAX_VALUE</code> than to <code class=\\\"language-text\\\">Infinity</code>, so it “rounds\\ndown,” whereas <code class=\\\"language-text\\\">Number.MAX_VALUE + Math.pow( 2, 970 )</code> is closer\\nto <code class=\\\"language-text\\\">Infinity</code> so it “rounds up”.</p>\\n<p>If you think too much about that, it’s going to make your head\\nhurt. So don’t. Seriously, stop!</p>\\n<p>Once you overflow to either one of the infinities, however,\\nthere’s no going back. In other words, in an almost poetic sense,\\nyou can go from finite to infinite but not from infinite back to\\nfinite.</p>\\n<p>It’s almost philosophical to ask: “What is <code class=\\\"language-text\\\">Infinity</code> divided by\\n<code class=\\\"language-text\\\">Infinity</code>”. Our naive brains would likely say <code class=\\\"language-text\\\">1</code> or maybe\\n<code class=\\\"language-text\\\">Infinity</code>. Turns out neither is true. Both mathematically and in\\nJavaScript, <code class=\\\"language-text\\\">Infinity / Infinity</code> is not a defined operation.\\nIn JS, this results in <code class=\\\"language-text\\\">NaN</code>.</p>\\n<h2>Negative zero</h2>\\n<p>It may confuse you as students of Computer Science major, but\\nJavascript has both negative and positive zeros!</p>\\n<p>Besides being specified literally as -0, negative zero also\\nresults from certain mathematic operations. For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>However, there is a strange behavior when you want to convert\\n<code class=\\\"language-text\\\">-0</code> to string:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// (some browser) consoles at least get it right</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n\\n<span class=\\\"token comment\\\">// but the spec insists on lying to you!</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\na <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n<span class=\\\"token function\\\">String</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n\\n<span class=\\\"token comment\\\">// strangely, even JSON gets in on the deception</span>\\nJSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n</code></pre>\\n      </div>\\n<p>and surprisingly, the reverse operation from <code class=\\\"language-text\\\">string</code> to\\n<code class=\\\"language-text\\\">number</code> results in a correct way:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n<span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\nJSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>In addition to stringification of negative zero being deceptive to\\nhide its true value, the comparison operators are also\\n(intentionally) configured to lie.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\na <span class=\\\"token operator\\\">==</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\na <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\na <span class=\\\"token operator\\\">></span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>In nowadays browsers you can get the right output of\\n<code class=\\\"language-text\\\">console.log</code> tho:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>However, older browsers may still return 0 (As a good programmer,\\nyou have to use an up-to-date software, right?)</p>\\n<p>Clearly, if you want to distinguish between <code class=\\\"language-text\\\">0</code> and <code class=\\\"language-text\\\">-0</code>, you\\ncan’t just rely on what the developer console outputs. So let’s be\\na little bit more clever:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  n <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">Infinity</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Great! But why do we need <code class=\\\"language-text\\\">-0</code>?</p>\\n<p>There are some kind of applications that use that sign to find out\\nthe direction of movement before it came to 0. Preserving the sign\\nof 0 prevents potentially unwanted information loss.</p>\\n<h3><code class=\\\"language-text\\\">Object.is(..)</code></h3>\\n<p>As of ES6, there’s a new utility that can be used to test two\\nvalues for absolute equality, without any of these exceptions.\\nIt’s called <code class=\\\"language-text\\\">Object.is(..)</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Let’s try to reimplement <code class=\\\"language-text\\\">Object.is(..)</code> for pre-ES6\\nenvironments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Object<span class=\\\"token punctuation\\\">.</span>is<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">is</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span> v2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// test for `-0`</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> v2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> v1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> v2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// test for `NaN`</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">!==</span> v1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> v2 <span class=\\\"token operator\\\">!==</span> v2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// everything else</span>\\n    <span class=\\\"token keyword\\\">return</span> v1 <span class=\\\"token operator\\\">===</span> v2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Object.is(..)</code> probably shouldn’t be used in cases where ==\\nor === are known to be safe (see Chapter 4 “Coercion”), as the\\noperators are likely much more efficient and certainly are more\\nidiomatic/common. <code class=\\\"language-text\\\">Object.is(..)</code> is mostly for these special\\ncases of equality.</p>\\n<h2>Value vs. Reference</h2>\\n<p>Let’s start from the example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `b` is always a copy of the value in `a`</span>\\nb<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> d <span class=\\\"token operator\\\">=</span> c<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `d` is a reference to the shared `[1,2,3]` value</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nc<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4]</span>\\nd<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4]</span>\\n</code></pre>\\n      </div>\\n<p>Simple values (aka scalar primitives) are always assigned/passed\\nby value-copy: null, undefined, string, number, boolean, and ES6’s\\nsymbol.</p>\\n<p>Compound values — objects (including arrays, and all boxed object\\nwrappers — see Chapter 3) and functions — always create a copy\\nof the reference on assignment or passing.</p>\\n<p>Since references point to the values themselves and not to the\\nvariables, you cannot use one reference to change where another\\nreference is pointed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\n\\n<span class=\\\"token comment\\\">// later</span>\\nb <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [4,5,6]</span>\\n</code></pre>\\n      </div>\\n<h2><code class=\\\"language-text\\\">this</code></h2>\\n<p>Consider this code snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo: '</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// keep track of how many times `foo` is called</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// foo: 6</span>\\n<span class=\\\"token comment\\\">// foo: 7</span>\\n<span class=\\\"token comment\\\">// foo: 8</span>\\n<span class=\\\"token comment\\\">// foo: 9</span>\\n\\n<span class=\\\"token comment\\\">// how many times was `foo` called?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0 -- WTF?</span>\\n</code></pre>\\n      </div>\\n<p>Congratulations, we’ve just created a global variable <code class=\\\"language-text\\\">count</code>\\nwith value <code class=\\\"language-text\\\">NaN</code>! <code class=\\\"language-text\\\">this</code> in <code class=\\\"language-text\\\">this.count++</code> points to\\nglobal object! :O</p>\\n<p>This is another way of creating and accesing global variables\\n(never do this):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>To solve this issue, we have to call foo function with binding to\\nfunction foo (which is apparently an object):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo: '</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// keep track of how many times `foo` is called</span>\\n  <span class=\\\"token comment\\\">// Note: `this` IS actually `foo` now, based on</span>\\n  <span class=\\\"token comment\\\">// how `foo` is called (see below)</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// using `call(..)`, we ensure the `this`</span>\\n    <span class=\\\"token comment\\\">// points at the function object (`foo`) itself</span>\\n    foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// foo: 6</span>\\n<span class=\\\"token comment\\\">// foo: 7</span>\\n<span class=\\\"token comment\\\">// foo: 8</span>\\n<span class=\\\"token comment\\\">// foo: 9</span>\\n\\n<span class=\\\"token comment\\\">// how many times was `foo` called?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<p>Let’s see what happens when you share reference of a function to\\nanother variable and then call it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// function reference/alias!</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `a` also property on global object</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"oops, global\\\"</span>\\n</code></pre>\\n      </div>\\n<p>Right! So what does this mean? <code class=\\\"language-text\\\">bar === obj.foo</code>. These\\nvariables are sharing the same reference to the same shared value.</p>\\n<p>Another example to show this problem from another side:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// `fn` is just another reference to `foo`</span>\\n\\n  <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;-- call-site!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `a` also property on global object</span>\\n\\n<span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"oops, global\\\"</span>\\n</code></pre>\\n      </div>\\n<h2>Automatic Semicolon Insertion</h2>\\n<p>One of the features that JavaScript offers is that semicolons are optional for programmers. However, you should be attentive with this! Sometimes missing the semicolons can result in errors or undesired results.</p>\\n<h3>Function return statements</h3>\\n<p>Let’s take a look at the function below. What will it return?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">hello</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'How are you?'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//undefined</span>\\n</code></pre>\\n      </div>\\n<p>Oops! It returns <code class=\\\"language-text\\\">undefined</code> instead of asking how are you. But why? Well, the reason is that it\\nadded a semicolon after <code class=\\\"language-text\\\">return</code> which means you didn’t mention what to return; thus, it’s\\nundefined.</p>\\n<p>What if you want to return several things and it’s not so comfortable to write it after the\\n<code class=\\\"language-text\\\">return</code>. You just need to add parentheses (see below).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">hello</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"How are you?\\\"</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//How are you?</span>\\n</code></pre>\\n      </div>\\n<h3>Starting a line with parentheses || angle brackets</h3>\\n<p>Another tricky edge case in JavaScript is when you skip putting a semicolon and start the next line\\nwith parentheses. Look at this code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> trickyVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'I am a String'</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Be Happy If You See Me'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// Uncaught TypeError: \\\"I am a String\\\" is not a function</span>\\n</code></pre>\\n      </div>\\n<p>To fix this error you should add a semicolon after defining a variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> trickyVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'I am a String'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Be Happy If You See Me'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Be Happy If You See Me</span>\\n</code></pre>\\n      </div>\\n<p>The same happens with <code class=\\\"language-text\\\">angle brackets [ ]</code>. Be careful in such cases!</p>\\n<h2>Other</h2>\\n<p>This isn’t even an edge case, but a lot of people make a mistake\\nright here:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'-5'</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'5-5'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>number <code class=\\\"language-text\\\">5</code> is simply coerced (type casted, type converted) to\\na string <code class=\\\"language-text\\\">&quot;5&quot;</code> and the concatenated to <code class=\\\"language-text\\\">&quot;-5&quot;</code></p>\\n<p>The same case with <code class=\\\"language-text\\\">-</code> sign! As we know, there is no such\\noperation for string using <code class=\\\"language-text\\\">-</code>. This JS will coerce <code class=\\\"language-text\\\">&quot;-5&quot;</code> to\\n<code class=\\\"language-text\\\">-5</code> and then do a mathmatical operation <code class=\\\"language-text\\\">-</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token string\\\">'-5'</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>A lot of beginner JS developers have a trouble with\\nunderstanding references in JS. As one of the biggerst issues\\nis this one:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">===</code> sign compares two reference-values. And of course\\nreferences to 2 different arrays are different, thus the\\ncompareson fails.</p>\\n<p>A very popular question for a JS developer! Take a minute and\\ntry to understand why would this happen!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 0</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// [object Object]</span>\\n</code></pre>\\n      </div>\\n<p>Ok, I hope you tried it! So here is the thing.</p>\\n<p>Let’s start with the first line</p>\\n<p>When we do <code class=\\\"language-text\\\">{} + []</code>, JS first reads <code class=\\\"language-text\\\">{}</code> as a block scope,\\nrun it and then immediately exits it because there is no\\noperation to do (It doesn’t recognize <code class=\\\"language-text\\\">{}</code> as object in this\\ncase!). And then we are left with <code class=\\\"language-text\\\">+ []</code> which means “change\\nthe type of <code class=\\\"language-text\\\">[]</code> to a number” (Remember how we change a string\\nto a number with the same operation <code class=\\\"language-text\\\">+&quot;5&quot; === 5</code>).\\nSo JS simply coerces <code class=\\\"language-text\\\">[]</code> to <code class=\\\"language-text\\\">0</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true!</span>\\n</code></pre>\\n      </div>\\n<p>The second line!</p>\\n<p>In this case JS understands <code class=\\\"language-text\\\">+</code> as a concatenation sign\\nbecause on both sides of the operation we can see objects\\n(Array and object)! So <code class=\\\"language-text\\\">+</code> just coerces <code class=\\\"language-text\\\">[]</code> to <code class=\\\"language-text\\\">&#39;&#39;</code> and <code class=\\\"language-text\\\">{}</code>\\nto <code class=\\\"language-text\\\">[object Object]</code>. After that it concatenates\\n<code class=\\\"language-text\\\">&#39;&#39; + [object Object]</code> which of course results in\\n<code class=\\\"language-text\\\">[object Object]</code>!</p>\\n<p>This is the case we’ve talked about on our slack channel!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token operator\\\">==</span> x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nx <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span>x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>As we all know the <code class=\\\"language-text\\\">==</code> operator doesn’t preserve types of the\\nvalues on both sides. So it coerces those until it gets the same\\ntype!</p>\\n<p>So let me describe you this case. On the second line where we have\\n<code class=\\\"language-text\\\">x == x</code>, we have an object (array) on both sides. We just check\\nif the reference of these objects are the same or not (of course\\nthose are the same because it’s the same variable). What’s about\\nthe 3rd line? On the left side we still have a reference to an\\narray, but on the right side we have (what?) a boolean value!!!\\nWhy does that happen? EZ, <code class=\\\"language-text\\\">!</code> operator changes the type of any\\nvalue to boolean! So <code class=\\\"language-text\\\">==</code> operator will do coercion of both sides\\nto get the same type. Both are coerced to <code class=\\\"language-text\\\">number</code>. So <code class=\\\"language-text\\\">[] -&gt; 0</code>\\nand <code class=\\\"language-text\\\">false -&gt; 0</code>. That’s it!</p>\\n<p>Let’s now consider this funny case! Have you thought about\\noverwriting <code class=\\\"language-text\\\">undefined</code>? Sounds crazy, right? JS doesn’t think so!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> undefined <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// really bad idea!</span>\\n</code></pre>\\n      </div>\\n<p>NEVER DO THIS.</p>\\n<!--\\nSo to prevent this from happening use `'use strict'` (We will talk about it in the next lecture but for now just use it :D )!\\n\\n```js\\n\\\"use strict\\\";\\nvar undefined = 2; // TypeError!\\n``` -->\\n<!-- ```js\\n// just in case you don't want to add\\n// 'use strict' to the whole environment\\nfoo();\\nfunction foo() {\\n\\t\\\"use strict\\\";\\n\\tundefined = 2; // TypeError!\\n}\\n``` -->\\n<p>Thanks for reading! Hope you liked it! :D</p>\\n<h3>Reference</h3>\\n<p>“You don’t know JS”: <a href=\\\"https://github.com/getify/You-Dont-Know-JS\\\">https://github.com/getify/You-Dont-Know-JS</a>\\n“Mauro Bringolf”: <a href=\\\"https://maurobringolf.ch/2017/06/automatic-semicolon-insertion-edge-cases-in-javascript/\\\">https://maurobringolf.ch/2017/06/automatic-semicolon-insertion-edge-cases-in-javascript/</a></p>\",\"frontmatter\":{\"title\":\"JavaScript. Edge Cases\",\"tags\":\"javascript, development\",\"author\":\"Elina Hovakimyan\",\"date\":\"March 06, 2018\",\"discussionId\":\"2018-02-08-javascript-edge-cases\"}}},\"pathContext\":{\"slug\":\"/2018-03-06-javascript-edge-cases/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-03-06-javascript-edge-cases-13aac46df18dc077dd0e.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"yerevancoder\",\"author\":\"Coders of Armenia\"}},\"markdownRemark\":{\"id\":\"/Users/holykill/Documents/iterate/yerevancoder.github.io/src/pages/2018-03-06-javascript-edge-cases/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Edge cases in JavaScript</h1>\\n<p>Hi everyone, today we are going to talk about the edge cases in JS</p>\\n<h2>Small Decimal Values</h2>\\n<p>The most (in)famous side effect of using binary floating-point\\nnumbers (which, remember, is true of all languages that use IEEE\\n754 — not just JavaScript as many assume/pretend) is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">0.1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">0.2</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Simply put, the representations for 0.1 and 0.2 in binary\\nfloating-point are not exact, so when they are added, the result\\nis not exactly 0.3. It’s really close: 0.30000000000000004, but if\\nyour comparison fails, “close” is irrelevant.</p>\\n<p>FYI, <code class=\\\"language-text\\\">0.1 + 0.5 === 0.6</code> works perfectly fine.</p>\\n<p>So you just have to be careful while working with floating numbers.</p>\\n<p>One way of handling this issue in JS is to use a tiny “rounding\\nerror”: <code class=\\\"language-text\\\">Number.EPSILON</code>. Here is its polyfill:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Number<span class=\\\"token punctuation\\\">.</span>EPSILON<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Number<span class=\\\"token punctuation\\\">.</span>EPSILON <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">52</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You simply have to create a function which does the “close to\\nequal” comparison with <code class=\\\"language-text\\\">Number.EPSILON</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span>n1<span class=\\\"token punctuation\\\">,</span> n2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">abs</span><span class=\\\"token punctuation\\\">(</span>n1 <span class=\\\"token operator\\\">-</span> n2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> Number<span class=\\\"token punctuation\\\">.</span>EPSILON<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.1</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">numbersCloseEnoughToEqual</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.0000001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.0000002</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<h2>NaN</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">NaN</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">NaN</code> is a very special value in that it’s never equal to another\\n<code class=\\\"language-text\\\">NaN</code> value (i.e., it’s never equal to itself). It’s the only\\nvalue, in fact, that is not reflexive (without the Identity\\ncharacteristic <code class=\\\"language-text\\\">x === x</code>). So, <code class=\\\"language-text\\\">NaN !== NaN</code>.</p>\\n<p>So how do we test for it, if we can’t compare to <code class=\\\"language-text\\\">NaN</code> (since that\\ncomparison would always fail)?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>Easy enough, right? We use the built-in global utility called\\n<code class=\\\"language-text\\\">isNaN(..)</code> and it tells us if the value is <code class=\\\"language-text\\\">NaN</code> or not. Problem solved!</p>\\n<p>Not so fast.</p>\\n<p>The isNaN(..) utility has a fatal flaw. It appears it tried to take the meaning of NaN (“Not a Number”) too literally — that its job is basically: “test if the thing passed in is either not a number or is a number.” But that’s not quite accurate.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// NaN</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"foo\\\"</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true -- ouch!</span>\\n</code></pre>\\n      </div>\\n<p>Clearly, “foo” is literally not a number, but it’s definitely not\\nthe NaN value either! This bug has been in JS since the very\\nbeginning (over 19 years of ouch).</p>\\n<p>As of ES6, finally a replacement utility has been provided:\\n<code class=\\\"language-text\\\">Number.isNaN(..)</code>. A simple polyfill for it so that you can\\nsafely check NaN values now even in pre-ES6 browsers is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Number<span class=\\\"token punctuation\\\">.</span>isNaN<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">isNaN</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nNumber<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nNumber<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isNaN</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false -- phew!</span>\\n</code></pre>\\n      </div>\\n<h1>Infinity</h1>\\n<p>Developers from traditional compiled languages like C are probably\\nused to seeing either a compiler error or runtime exception, like\\n“Divide by zero,” for an operation like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>However, in JS, this operation is well-defined and results in the\\nvalue Infinity (aka Number.POSITIVE_INFINITY). Unsurprisingly:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -Infinity</span>\\n</code></pre>\\n      </div>\\n<p>As you can see, -Infinity (aka Number.NEGATIVE_INFINITY) results\\nfrom a divide-by-zero where either (but not both!) of the divide\\noperands is negative.</p>\\n<p>JS uses finite numeric representations (IEEE 754 floating-point,\\nwhich we covered earlier), so contrary to pure mathematics, it\\nseems it is possible to overflow even with an operation like\\naddition or subtraction, in which case you’d get Infinity or\\n-Infinity.</p>\\n<p>For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_VALUE<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1.7976931348623157e+308</span>\\na <span class=\\\"token operator\\\">+</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\na <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">970</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Infinity</span>\\na <span class=\\\"token operator\\\">+</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">969</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1.7976931348623157e+308</span>\\n</code></pre>\\n      </div>\\n<p>According to the specification, if an operation like addition\\nresults in a value that’s too big to represent, the IEEE 754\\n“round-to-nearest” mode specifies what the result should be. So,\\nin a crude sense, <code class=\\\"language-text\\\">Number.MAX_VALUE + Math.pow( 2, 969 )</code> is\\ncloser to <code class=\\\"language-text\\\">Number.MAX_VALUE</code> than to <code class=\\\"language-text\\\">Infinity</code>, so it “rounds\\ndown,” whereas <code class=\\\"language-text\\\">Number.MAX_VALUE + Math.pow( 2, 970 )</code> is closer\\nto <code class=\\\"language-text\\\">Infinity</code> so it “rounds up”.</p>\\n<p>If you think too much about that, it’s going to make your head\\nhurt. So don’t. Seriously, stop!</p>\\n<p>Once you overflow to either one of the infinities, however,\\nthere’s no going back. In other words, in an almost poetic sense,\\nyou can go from finite to infinite but not from infinite back to\\nfinite.</p>\\n<p>It’s almost philosophical to ask: “What is <code class=\\\"language-text\\\">Infinity</code> divided by\\n<code class=\\\"language-text\\\">Infinity</code>”. Our naive brains would likely say <code class=\\\"language-text\\\">1</code> or maybe\\n<code class=\\\"language-text\\\">Infinity</code>. Turns out neither is true. Both mathematically and in\\nJavaScript, <code class=\\\"language-text\\\">Infinity / Infinity</code> is not a defined operation.\\nIn JS, this results in <code class=\\\"language-text\\\">NaN</code>.</p>\\n<h2>Negative zero</h2>\\n<p>It may confuse you as students of Computer Science major, but\\nJavascript has both negative and positive zeros!</p>\\n<p>Besides being specified literally as -0, negative zero also\\nresults from certain mathematic operations. For example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>However, there is a strange behavior when you want to convert\\n<code class=\\\"language-text\\\">-0</code> to string:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// (some browser) consoles at least get it right</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n\\n<span class=\\\"token comment\\\">// but the spec insists on lying to you!</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\na <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n<span class=\\\"token function\\\">String</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n\\n<span class=\\\"token comment\\\">// strangely, even JSON gets in on the deception</span>\\nJSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"0\\\"</span>\\n</code></pre>\\n      </div>\\n<p>and surprisingly, the reverse operation from <code class=\\\"language-text\\\">string</code> to\\n<code class=\\\"language-text\\\">number</code> results in a correct way:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n<span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\nJSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>In addition to stringification of negative zero being deceptive to\\nhide its true value, the comparison operators are also\\n(intentionally) configured to lie.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\na <span class=\\\"token operator\\\">==</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\na <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\na <span class=\\\"token operator\\\">></span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>In nowadays browsers you can get the right output of\\n<code class=\\\"language-text\\\">console.log</code> tho:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -0</span>\\n</code></pre>\\n      </div>\\n<p>However, older browsers may still return 0 (As a good programmer,\\nyou have to use an up-to-date software, right?)</p>\\n<p>Clearly, if you want to distinguish between <code class=\\\"language-text\\\">0</code> and <code class=\\\"language-text\\\">-0</code>, you\\ncan’t just rely on what the developer console outputs. So let’s be\\na little bit more clever:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  n <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">Infinity</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token function\\\">isNegZero</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Great! But why do we need <code class=\\\"language-text\\\">-0</code>?</p>\\n<p>There are some kind of applications that use that sign to find out\\nthe direction of movement before it came to 0. Preserving the sign\\nof 0 prevents potentially unwanted information loss.</p>\\n<h3><code class=\\\"language-text\\\">Object.is(..)</code></h3>\\n<p>As of ES6, there’s a new utility that can be used to test two\\nvalues for absolute equality, without any of these exceptions.\\nIt’s called <code class=\\\"language-text\\\">Object.is(..)</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p>Let’s try to reimplement <code class=\\\"language-text\\\">Object.is(..)</code> for pre-ES6\\nenvironments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Object<span class=\\\"token punctuation\\\">.</span>is<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">is</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span> v2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// test for `-0`</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> v2 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> v1 <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">/</span> v2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// test for `NaN`</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>v1 <span class=\\\"token operator\\\">!==</span> v1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> v2 <span class=\\\"token operator\\\">!==</span> v2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// everything else</span>\\n    <span class=\\\"token keyword\\\">return</span> v1 <span class=\\\"token operator\\\">===</span> v2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Object.is(..)</code> probably shouldn’t be used in cases where ==\\nor === are known to be safe (see Chapter 4 “Coercion”), as the\\noperators are likely much more efficient and certainly are more\\nidiomatic/common. <code class=\\\"language-text\\\">Object.is(..)</code> is mostly for these special\\ncases of equality.</p>\\n<h2>Value vs. Reference</h2>\\n<p>Let’s start from the example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `b` is always a copy of the value in `a`</span>\\nb<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> d <span class=\\\"token operator\\\">=</span> c<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `d` is a reference to the shared `[1,2,3]` value</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nc<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4]</span>\\nd<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4]</span>\\n</code></pre>\\n      </div>\\n<p>Simple values (aka scalar primitives) are always assigned/passed\\nby value-copy: null, undefined, string, number, boolean, and ES6’s\\nsymbol.</p>\\n<p>Compound values — objects (including arrays, and all boxed object\\nwrappers — see Chapter 3) and functions — always create a copy\\nof the reference on assignment or passing.</p>\\n<p>Since references point to the values themselves and not to the\\nvariables, you cannot use one reference to change where another\\nreference is pointed:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\n\\n<span class=\\\"token comment\\\">// later</span>\\nb <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nb<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [4,5,6]</span>\\n</code></pre>\\n      </div>\\n<h2><code class=\\\"language-text\\\">this</code></h2>\\n<p>Consider this code snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo: '</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// keep track of how many times `foo` is called</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// foo: 6</span>\\n<span class=\\\"token comment\\\">// foo: 7</span>\\n<span class=\\\"token comment\\\">// foo: 8</span>\\n<span class=\\\"token comment\\\">// foo: 9</span>\\n\\n<span class=\\\"token comment\\\">// how many times was `foo` called?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0 -- WTF?</span>\\n</code></pre>\\n      </div>\\n<p>Congratulations, we’ve just created a global variable <code class=\\\"language-text\\\">count</code>\\nwith value <code class=\\\"language-text\\\">NaN</code>! <code class=\\\"language-text\\\">this</code> in <code class=\\\"language-text\\\">this.count++</code> points to\\nglobal object! :O</p>\\n<p>This is another way of creating and accesing global variables\\n(never do this):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>To solve this issue, we have to call foo function with binding to\\nfunction foo (which is apparently an object):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo: '</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// keep track of how many times `foo` is called</span>\\n  <span class=\\\"token comment\\\">// Note: `this` IS actually `foo` now, based on</span>\\n  <span class=\\\"token comment\\\">// how `foo` is called (see below)</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// using `call(..)`, we ensure the `this`</span>\\n    <span class=\\\"token comment\\\">// points at the function object (`foo`) itself</span>\\n    foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// foo: 6</span>\\n<span class=\\\"token comment\\\">// foo: 7</span>\\n<span class=\\\"token comment\\\">// foo: 8</span>\\n<span class=\\\"token comment\\\">// foo: 9</span>\\n\\n<span class=\\\"token comment\\\">// how many times was `foo` called?</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<p>Let’s see what happens when you share reference of a function to\\nanother variable and then call it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// function reference/alias!</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `a` also property on global object</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"oops, global\\\"</span>\\n</code></pre>\\n      </div>\\n<p>Right! So what does this mean? <code class=\\\"language-text\\\">bar === obj.foo</code>. These\\nvariables are sharing the same reference to the same shared value.</p>\\n<p>Another example to show this problem from another side:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// `fn` is just another reference to `foo`</span>\\n\\n  <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;-- call-site!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// `a` also property on global object</span>\\n\\n<span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"oops, global\\\"</span>\\n</code></pre>\\n      </div>\\n<h2>Automatic Semicolon Insertion</h2>\\n<p>One of the features that JavaScript offers is that semicolons are optional for programmers. However, you should be attentive with this! Sometimes missing the semicolons can result in errors or undesired results.</p>\\n<h3>Function return statements</h3>\\n<p>Let’s take a look at the function below. What will it return?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">hello</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'How are you?'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//undefined</span>\\n</code></pre>\\n      </div>\\n<p>Oops! It returns <code class=\\\"language-text\\\">undefined</code> instead of asking how are you. But why? Well, the reason is that it\\nadded a semicolon after <code class=\\\"language-text\\\">return</code> which means you didn’t mention what to return; thus, it’s\\nundefined.</p>\\n<p>What if you want to return several things and it’s not so comfortable to write it after the\\n<code class=\\\"language-text\\\">return</code>. You just need to add parentheses (see below).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">hello</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token string\\\">\\\"How are you?\\\"</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//How are you?</span>\\n</code></pre>\\n      </div>\\n<h3>Starting a line with parentheses || angle brackets</h3>\\n<p>Another tricky edge case in JavaScript is when you skip putting a semicolon and start the next line\\nwith parentheses. Look at this code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> trickyVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'I am a String'</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Be Happy If You See Me'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// Uncaught TypeError: \\\"I am a String\\\" is not a function</span>\\n</code></pre>\\n      </div>\\n<p>To fix this error you should add a semicolon after defining a variable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> trickyVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'I am a String'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Be Happy If You See Me'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Be Happy If You See Me</span>\\n</code></pre>\\n      </div>\\n<p>The same happens with <code class=\\\"language-text\\\">angle brackets [ ]</code>. Be careful in such cases!</p>\\n<h2>Other</h2>\\n<p>This isn’t even an edge case, but a lot of people make a mistake\\nright here:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'-5'</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'5-5'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>number <code class=\\\"language-text\\\">5</code> is simply coerced (type casted, type converted) to\\na string <code class=\\\"language-text\\\">&quot;5&quot;</code> and the concatenated to <code class=\\\"language-text\\\">&quot;-5&quot;</code></p>\\n<p>The same case with <code class=\\\"language-text\\\">-</code> sign! As we know, there is no such\\noperation for string using <code class=\\\"language-text\\\">-</code>. This JS will coerce <code class=\\\"language-text\\\">&quot;-5&quot;</code> to\\n<code class=\\\"language-text\\\">-5</code> and then do a mathmatical operation <code class=\\\"language-text\\\">-</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token number\\\">5</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token string\\\">'-5'</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>A lot of beginner JS developers have a trouble with\\nunderstanding references in JS. As one of the biggerst issues\\nis this one:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">===</code> sign compares two reference-values. And of course\\nreferences to 2 different arrays are different, thus the\\ncompareson fails.</p>\\n<p>A very popular question for a JS developer! Take a minute and\\ntry to understand why would this happen!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 0</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// [object Object]</span>\\n</code></pre>\\n      </div>\\n<p>Ok, I hope you tried it! So here is the thing.</p>\\n<p>Let’s start with the first line</p>\\n<p>When we do <code class=\\\"language-text\\\">{} + []</code>, JS first reads <code class=\\\"language-text\\\">{}</code> as a block scope,\\nrun it and then immediately exits it because there is no\\noperation to do (It doesn’t recognize <code class=\\\"language-text\\\">{}</code> as object in this\\ncase!). And then we are left with <code class=\\\"language-text\\\">+ []</code> which means “change\\nthe type of <code class=\\\"language-text\\\">[]</code> to a number” (Remember how we change a string\\nto a number with the same operation <code class=\\\"language-text\\\">+&quot;5&quot; === 5</code>).\\nSo JS simply coerces <code class=\\\"language-text\\\">[]</code> to <code class=\\\"language-text\\\">0</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true!</span>\\n</code></pre>\\n      </div>\\n<p>The second line!</p>\\n<p>In this case JS understands <code class=\\\"language-text\\\">+</code> as a concatenation sign\\nbecause on both sides of the operation we can see objects\\n(Array and object)! So <code class=\\\"language-text\\\">+</code> just coerces <code class=\\\"language-text\\\">[]</code> to <code class=\\\"language-text\\\">&#39;&#39;</code> and <code class=\\\"language-text\\\">{}</code>\\nto <code class=\\\"language-text\\\">[object Object]</code>. After that it concatenates\\n<code class=\\\"language-text\\\">&#39;&#39; + [object Object]</code> which of course results in\\n<code class=\\\"language-text\\\">[object Object]</code>!</p>\\n<p>This is the case we’ve talked about on our slack channel!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nx <span class=\\\"token operator\\\">==</span> x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nx <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span>x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>As we all know the <code class=\\\"language-text\\\">==</code> operator doesn’t preserve types of the\\nvalues on both sides. So it coerces those until it gets the same\\ntype!</p>\\n<p>So let me describe you this case. On the second line where we have\\n<code class=\\\"language-text\\\">x == x</code>, we have an object (array) on both sides. We just check\\nif the reference of these objects are the same or not (of course\\nthose are the same because it’s the same variable). What’s about\\nthe 3rd line? On the left side we still have a reference to an\\narray, but on the right side we have (what?) a boolean value!!!\\nWhy does that happen? EZ, <code class=\\\"language-text\\\">!</code> operator changes the type of any\\nvalue to boolean! So <code class=\\\"language-text\\\">==</code> operator will do coercion of both sides\\nto get the same type. Both are coerced to <code class=\\\"language-text\\\">number</code>. So <code class=\\\"language-text\\\">[] -&gt; 0</code>\\nand <code class=\\\"language-text\\\">false -&gt; 0</code>. That’s it!</p>\\n<p>Let’s now consider this funny case! Have you thought about\\noverwriting <code class=\\\"language-text\\\">undefined</code>? Sounds crazy, right? JS doesn’t think so!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> undefined <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// really bad idea!</span>\\n</code></pre>\\n      </div>\\n<p>NEVER DO THIS.</p>\\n<!--\\nSo to prevent this from happening use `'use strict'` (We will talk about it in the next lecture but for now just use it :D )!\\n\\n```js\\n\\\"use strict\\\";\\nvar undefined = 2; // TypeError!\\n``` -->\\n<!-- ```js\\n// just in case you don't want to add\\n// 'use strict' to the whole environment\\nfoo();\\nfunction foo() {\\n\\t\\\"use strict\\\";\\n\\tundefined = 2; // TypeError!\\n}\\n``` -->\\n<p>Thanks for reading! Hope you liked it! :D</p>\\n<h3>Reference</h3>\\n<p>“You don’t know JS”: <a href=\\\"https://github.com/getify/You-Dont-Know-JS\\\">https://github.com/getify/You-Dont-Know-JS</a>\\n“Mauro Bringolf”: <a href=\\\"https://maurobringolf.ch/2017/06/automatic-semicolon-insertion-edge-cases-in-javascript/\\\">https://maurobringolf.ch/2017/06/automatic-semicolon-insertion-edge-cases-in-javascript/</a></p>\",\"frontmatter\":{\"title\":\"JavaScript. Edge Cases\",\"tags\":\"javascript, development\",\"author\":\"Elina Hovakimyan\",\"date\":\"March 06, 2018\",\"discussionId\":\"2018-02-08-javascript-edge-cases\"}}},\"pathContext\":{\"slug\":\"/2018-03-06-javascript-edge-cases/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-03-06-javascript-edge-cases.json\n// module id = 625\n// module chunks = 122598896297167"],"sourceRoot":""}